# 1. 定义整个流水线的“工序”顺序
stages:
  - build
  - deploy

# ----------------------------------------------------------------

# 2. 定义第一个任务：构建前端 (此部分保持不变)
build_frontend:
  stage: build
  image: node:22
  script:
    - echo "--- Building frontend for hh_branch ---"
    - cd frontend/realtime-monitor-fronted
    - npm config set registry https://registry.npmmirror.com/
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/realtime-monitor-fronted/dist/
  rules:
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'

# ----------------------------------------------------------------

# 3. 定义第二个任务：部署到服务器 (采用最终的文件变量方案)
deploy_to_server:
  stage: deploy
  image: alpine:latest

  before_script:
    - 'apk update && apk add openssh-client rsync'
    - 'eval $(ssh-agent -s)'
    - 'chmod 600 "$DEPLOY_KEY_FILE"'
    - 'ssh-add "$DEPLOY_KEY_FILE"'
    - 'mkdir -p ~/.ssh'
    - 'ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts'

  script:
    - echo "--- Starting Full Deployment ---"
    
    # 第1步：部署前端文件 (不变)
    - |
      echo "1. Deploying frontend files..."
      rsync -avz --delete frontend/realtime-monitor-fronted/dist/ ${SERVER_USER}@${SERVER_HOST}:/usr/local/nginx/html/
    
    # 【关键修改】第2步：不再使用git pull，而是用rsync同步后端代码
    - |
      echo "2. Deploying backend files..."
      # --exclude '.git' 排除了.git目录，我们只同步代码文件
      # 注意目标路径是您服务器上后端代码的路径
      rsync -avz --delete --exclude '.git' backend/ ${SERVER_USER}@${SERVER_HOST}:/root/realtime-video-monitoring-hh/realtime-video-monitoring/backend/
    
    # 第3步：仅重启服务
    - |
      echo "3. Restarting backend service..."
      ssh ${SERVER_USER}@${SERVER_HOST} "
        sudo systemctl restart video-monitoring-backend.service;
        echo '--> Deployment finished!';
      "
      
  rules:
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'