# 定义流水线的各个阶段
stages:
  - build
  - deploy

# 任务一：构建前端项目 (此部分保持不变，因为它已成功)
build_frontend:
  stage: build
  image: node:22
  script:
    - echo "--- Building frontend for hh_branch ---"
    - cd frontend/realtime-monitor-fronted
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/realtime-monitor-fronted/dist/
  rules:
    # 仅当代码被推送到 hh_branch 分支时，才执行此任务
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'

# 任务二：部署到云服务器 (采用全新的sshpass方案)
deploy_to_server:
  stage: deploy
  image: alpine:latest

  # 【关键修改】before_script部分被大大简化
  before_script:
    # 我们不再需要复杂的ssh-agent设置，只需要安装sshpass和rsync
    - 'apk update && apk add sshpass rsync'

  # 【关键修改】script部分完全重写，使用sshpass进行认证
  script:
    - echo "--- Starting Deployment using sshpass ---"
    
    # 1. 使用 sshpass 和 rsync 来部署前端文件
    - |
      echo "1. Deploying frontend files..."
      # 使用SSHPASS环境变量将密码传递给rsync
      # 请确保/usr/local/nginx/html/是您服务器上正确的Nginx网站根目录
      SSHPASS="$SERVER_PASSWORD" rsync -avz --delete frontend/realtime-monitor-fronted/dist/ ${SERVER_USER}@${SERVER_HOST}:/usr/local/nginx/html/
    
    # 2. 使用 sshpass 和 ssh 来执行远程命令，更新后端并重启服务
    - |
      echo "2. Updating backend and restarting service..."
      # 使用SSHPASS环境变量将密码传递给ssh
      SSHPASS="$SERVER_PASSWORD" ssh ${SERVER_USER}@${SERVER_HOST} "
        echo '--> Pulling latest backend code...';
        # 请确保/root/realtime-video-monitoring是您服务器上正确的项目根目录
        cd /root/realtime-video-monitoring;
        git checkout hh_branch;
        git pull;
        
        echo '--> Restarting backend service...';
        # 请确保video-monitoring-backend.service是您在服务器上配置好的真实服务名
        sudo systemctl restart video-monitoring-backend.service;
        
        echo '--> Deployment finished!';
      "
  
  rules:
    # 仅当代码被推送到 hh_branch 分支时，才执行此任务
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'