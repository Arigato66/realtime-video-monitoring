stages:
  - build
  - deploy

build_frontend:
  stage: build
  image: node:22
  script:
    - echo "--- Building frontend for hh_branch ---"
    - cd frontend/realtime-monitor-fronted
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/realtime-monitor-fronted/dist/
  # 【关键修改】使用rules来定义规则
  rules:
    # 仅当代码被推送到 hh_branch 分支时，才执行此任务
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'

deploy_to_server:
  stage: deploy
  image: alpine:latest
  before_script:
    - 'apk update && apk add openssh-client rsync'
    - 'eval $(ssh-agent -s)'
    - 'echo "$DEPLOY_KEY" | tr -d "\r" | ssh-add -'
    - 'mkdir -p ~/.ssh && chmod 700 ~/.ssh'
    - 'echo "Host * StrictHostKeyChecking no" >> ~/.ssh/config'
  script:
    - echo "--- Deploying hh_branch to server ---"
    # 1. 同步服务器上的代码库 (让后端代码保持最新)
    - |
      ssh ${SERVER_USER}@${SERVER_HOST} "
        echo '1. Pulling latest code...';
        # 【请修改】确保路径正确
        cd /root/realtime-video-monitoring;
        # 切换到您的分支并拉取最新代码
        git checkout hh_branch;
        git pull;
      "
    # 2. 将构建好的前端dist文件夹同步到服务器的Nginx网站根目录
    - |
      echo "2. Deploying frontend files..."
      # 【请修改】确保Nginx网站根目录正确
      rsync -avz --delete frontend/realtime-monitor-fronted/dist/ ${SERVER_USER}@${SERVER_HOST}:/usr/local/nginx/html/
    # 3. 重启后端服务
    - |
      echo "3. Restarting backend service..."
      ssh ${SERVER_USER}@${SERVER_HOST} "
        # 【请修改】使用您在服务器上配置好的真实服务名
        sudo systemctl restart video-monitoring-backend.service;
      "
    - echo "--- Deployment Finished ---"
  # 【关键修改】使用rules来定义规则
  rules:
    # 仅当代码被推送到 hh_branch 分支时，才执行此任务
    - if: '$CI_COMMIT_BRANCH == "hh_branch"'